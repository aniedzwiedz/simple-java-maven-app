pipeline {
    agent any
    tools { 
        maven 'Maven 3.3.9' 
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }
    environment {
        DOCKER_IMAGE_NAME = 'simple-java-maven-app' // Customize this with your desired image name
        DOCKER_IMAGE_TAG = "v${env.BUILD_NUMBER}" // You can use the build number as a tag or customize it
        DOCKER_REGISTRY_CREDENTIALS = credentials('aniedzwiedz-dockerHub') 
    }
    stages {
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
            }
        }
        
                stage('Build and Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry-1.docker.io', 'dockerhub_credentials') {
                        // Build the Docker image
                        def customImage = docker.build("${IMAGE_NAME}:${TAG}")

                        // Push the Docker image to Docker Hub
                        customImage.push()
                    }
                }
            }
        }
        stage('Docker Build') {
            steps {
                // Build the Docker image using the Dockerfile in your project directory
                script {
                    def dockerImage = docker.build("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}", "-f Dockerfile .")
                }
            }
        }
        
        stage('Docker Tag') {
            steps {
                script {
                    // Tag the Docker image with a version and 'latest'
                    def dockerImage = docker.image("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}")
                    dockerImage.tag("${DOCKER_IMAGE_NAME}:latest")
                }
            }
        }
        
        stage('Docker Push') {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${DOCKER_REGISTRY_CREDENTIALS}", usernameVariable: 'DOCKER_REGISTRY_USERNAME', passwordVariable: 'DOCKER_REGISTRY_PASSWORD']]) {
                    sh "docker login -u ${DOCKER_REGISTRY_USERNAME} -p ${DOCKER_REGISTRY_PASSWORD}"
                }
                
                // Push the Docker images to your registry
                script {
                    def dockerImage = docker.image("${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}")
                    dockerImage.push()
                    dockerImage = docker.image("${DOCKER_IMAGE_NAME}:latest")
                    dockerImage.push()
                }
            }
        }
    }

        post {
        success {
            echo 'Docker image built and pushed successfully!'
        }
    }
}